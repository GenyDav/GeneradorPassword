package generadorcontraseña;

import java.awt.Color;
import java.awt.event.KeyEvent;
import javax.swing.ImageIcon;

/**
 * Clase que contiene la interfaz gráfica del programa. Proporciona los 
 * elementos necesarios para que el usuario pueda configurar las propiedades de 
 * la contraseña (longitud y tipo de caracteres a utilizar) según sus necesidades.
 * @author Geny
 * @version 1.0
 */
public class Pantalla extends javax.swing.JFrame {
    private Gen generador;              // objeto que crea las contraseñas
    private int numPropSel;             // número de tipos de caracteres que se utilizan en la generación de la contraseña
    private int longitud;               // número caracteres de la contraseña
    private NivelSeguridad nivel;       // nivel de seguridad de la contraseña
    private final int LONGITUD_MAX;     // longitud máxima que debe tener una contraseña (50)
    private final int LONGITUD_MIN;     // longitud mínima que debe tener una contraseña (4)
    private boolean longitudCorregida;  // true si hubo cambio en la longitud porque su valor estaba fuera de rango
    
    private boolean actualizacionIncompleta; /* True si la corrección de la longitud 
        se hizo sin actualizar la contraseña después. Esto ocurre cuando el campo de 
        longitud pierde el foco por causa de cualquier otro elemento disinto al botón
        para generar una contraseña nueva o un checkbox (por ejemplo, al hacer 
        clic en el campo de la contraseña nueva o en el botón copiar).
    */
    
    /**
     * Crea una nueva forma Pantalla e inicializa todas las propiedades a sus
     * valores por defecto.
     */
    public Pantalla() {
        initComponents();
        setResizable(false);
        tamPasswd.setFocusTraversalKeysEnabled(false);
        setTitle("Generador de contraseñas");
        setSize(670, 469);
        pack();
        setLocationRelativeTo(null);
        setIconImage(new ImageIcon(getClass().getResource("/img/icono.png")).getImage());
        campoPassword.setBackground(new java.awt.Color(0,0,0,1)); // Hacer que el campo sea transparente
        tamPasswd.setBackground(new java.awt.Color(0,0,0,1));
        generador = new Gen();
        longitud = Integer.parseInt(tamPasswd.getText());   
        numPropSel = 4;
        longitudCorregida = false;
        actualizacionIncompleta = false;
        LONGITUD_MAX = 50;
        LONGITUD_MIN = 4;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        tamPasswd = new javax.swing.JTextField();
        btnDecremento = new javax.swing.JButton();
        checkNums = new javax.swing.JCheckBox();
        checkMayus = new javax.swing.JCheckBox();
        checkSim = new javax.swing.JCheckBox();
        btnIncremento = new javax.swing.JButton();
        campoPassword = new javax.swing.JTextField();
        checkMinus = new javax.swing.JCheckBox();
        btnGenerar = new javax.swing.JButton();
        btnCopiar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(null);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(146, 208, 80));
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 207, 446, 10));

        tamPasswd.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        tamPasswd.setForeground(new java.awt.Color(255, 255, 255));
        tamPasswd.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tamPasswd.setText("10");
        tamPasswd.setAutoscrolls(false);
        tamPasswd.setBorder(null);
        tamPasswd.setCaretColor(new java.awt.Color(204, 255, 255));
        tamPasswd.setOpaque(false);
        tamPasswd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tamPasswdFocusLost(evt);
            }
        });
        tamPasswd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tamPasswdKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tamPasswdKeyTyped(evt);
            }
        });
        getContentPane().add(tamPasswd, new org.netbeans.lib.awtextra.AbsoluteConstraints(122, 311, 100, 50));

        btnDecremento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/btnDec.png"))); // NOI18N
        btnDecremento.setBorderPainted(false);
        btnDecremento.setContentAreaFilled(false);
        btnDecremento.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDecremento.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/btnDec-hover.png"))); // NOI18N
        btnDecremento.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/btnDec-clic.png"))); // NOI18N
        btnDecremento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecrementoActionPerformed(evt);
            }
        });
        getContentPane().add(btnDecremento, new org.netbeans.lib.awtextra.AbsoluteConstraints(234, 336, 48, 37));

        checkNums.setSelected(true);
        checkNums.setContentAreaFilled(false);
        checkNums.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/checkbox-deselected.png"))); // NOI18N
        checkNums.setRolloverEnabled(false);
        checkNums.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/checkbox-selected.png"))); // NOI18N
        checkNums.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkNumsActionPerformed(evt);
            }
        });
        getContentPane().add(checkNums, new org.netbeans.lib.awtextra.AbsoluteConstraints(316, 342, 100, 30));

        checkMayus.setSelected(true);
        checkMayus.setContentAreaFilled(false);
        checkMayus.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        checkMayus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/checkbox-deselected.png"))); // NOI18N
        checkMayus.setRolloverEnabled(false);
        checkMayus.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/checkbox-selected.png"))); // NOI18N
        checkMayus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkMayusActionPerformed(evt);
            }
        });
        getContentPane().add(checkMayus, new org.netbeans.lib.awtextra.AbsoluteConstraints(434, 302, 120, 30));

        checkSim.setSelected(true);
        checkSim.setContentAreaFilled(false);
        checkSim.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/checkbox-deselected.png"))); // NOI18N
        checkSim.setRolloverEnabled(false);
        checkSim.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/checkbox-selected.png"))); // NOI18N
        checkSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkSimActionPerformed(evt);
            }
        });
        getContentPane().add(checkSim, new org.netbeans.lib.awtextra.AbsoluteConstraints(434, 342, 110, 30));

        btnIncremento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/btnInc.png"))); // NOI18N
        btnIncremento.setBorderPainted(false);
        btnIncremento.setContentAreaFilled(false);
        btnIncremento.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnIncremento.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/btnInc-hover.png"))); // NOI18N
        btnIncremento.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/btnInc-clic.png"))); // NOI18N
        btnIncremento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIncrementoActionPerformed(evt);
            }
        });
        getContentPane().add(btnIncremento, new org.netbeans.lib.awtextra.AbsoluteConstraints(234, 300, 48, 37));

        campoPassword.setFont(new java.awt.Font("Segoe UI", 0, 22)); // NOI18N
        campoPassword.setForeground(new java.awt.Color(255, 255, 255));
        campoPassword.setBorder(null);
        campoPassword.setCaretColor(new java.awt.Color(204, 255, 255));
        campoPassword.setOpaque(false);
        campoPassword.setSelectedTextColor(new java.awt.Color(204, 204, 204));
        campoPassword.setSelectionColor(new java.awt.Color(0, 2, 72));
        campoPassword.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                campoPasswordMouseClicked(evt);
            }
        });
        getContentPane().add(campoPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(113, 132, 310, 50));

        checkMinus.setSelected(true);
        checkMinus.setContentAreaFilled(false);
        checkMinus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/checkbox-deselected.png"))); // NOI18N
        checkMinus.setRolloverEnabled(false);
        checkMinus.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/checkbox-selected.png"))); // NOI18N
        checkMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkMinusActionPerformed(evt);
            }
        });
        getContentPane().add(checkMinus, new org.netbeans.lib.awtextra.AbsoluteConstraints(316, 302, 110, 30));

        btnGenerar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/btnGen.png"))); // NOI18N
        btnGenerar.setToolTipText("Generar nueva contraseña");
        btnGenerar.setBorderPainted(false);
        btnGenerar.setContentAreaFilled(false);
        btnGenerar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGenerar.setFocusPainted(false);
        btnGenerar.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/btnGen-clic.png"))); // NOI18N
        btnGenerar.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/btnGen-hover.png"))); // NOI18N
        btnGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarActionPerformed(evt);
            }
        });
        getContentPane().add(btnGenerar, new org.netbeans.lib.awtextra.AbsoluteConstraints(501, 131, 54, 53));

        btnCopiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/btnCopiar.png"))); // NOI18N
        btnCopiar.setToolTipText("Copiar la contraseña");
        btnCopiar.setBorderPainted(false);
        btnCopiar.setContentAreaFilled(false);
        btnCopiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCopiar.setFocusPainted(false);
        btnCopiar.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/btnCopiar-clic.png"))); // NOI18N
        btnCopiar.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/btnCopiar-hover.png"))); // NOI18N
        btnCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopiarActionPerformed(evt);
            }
        });
        getContentPane().add(btnCopiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(437, 130, 54, 53));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fondo.png"))); // NOI18N
        jLabel1.setAlignmentY(0.0F);
        jLabel1.setMaximumSize(null);
        jLabel1.setMinimumSize(null);
        jLabel1.setPreferredSize(new java.awt.Dimension(670, 468));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 670, 468));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Copia la contraseña generada en el portapapeles.
     * @param evt Evento lanzado al presionar el botón 'Copiar' 
     */
    private void btnCopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopiarActionPerformed
        campoPassword.selectAll();
        campoPassword.copy();
        actualizacionIncompleta = true;
    }//GEN-LAST:event_btnCopiarActionPerformed

    /**
     * Genera una contraseña distinta cada vez que se presiona el botón 'Generar'.
     * @param evt Evento lanzado al presionar el botón 'Generar' 
     */
    private void btnGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarActionPerformed
        actualizarPassword();
    }//GEN-LAST:event_btnGenerarActionPerformed
    
    /**
     * Método que garantiza que siempre se encuentre seleccionado al menos uno
     * de los tipos de caracteres que pueden ser incluidos para generar una
     * contraseña.
     * Si el usuario selecciona/deselecciona un elemento y el total de elementos
     * seleccionados es mayor a 1, se crea una nueva contraseña que ya incluye los
     * caracteres de los tipos seleccionados.
     * @param checkBox Checkbox sobre el que el usuario ha realizado una acción 
     */
    private void verificarCheckBoxes(javax.swing.JCheckBox checkBox){
        if(!checkBox.isSelected()){
            if(numPropSel>1){
                numPropSel--;
                actualizarPassword();
            }else{
                // si solo existe un tipo seleccionado, no es posible quitarle la selección a ese elemento
                checkBox.setSelected(true);
            }
        }else{
            numPropSel++;
            actualizarPassword();
        }
    }
    
    /**
     * Llama al método encargado de verificar en todo momento se encuentre 
     * seleccionado al menos un checkbox (en este caso, el de letras minúsculas).
     * @param evt Evento lanzado al presionar el checkbox que permite incluir 
     * letras minúsculas en la contraseña
     */
    private void checkMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkMinusActionPerformed
        verificarCheckBoxes(checkMinus);
    }//GEN-LAST:event_checkMinusActionPerformed

    /**
     * Llama al método encargado de verificar que en todo momento se encuentre 
     * seleccionado al menos un checkbox (en este caso, el de letras mayúsculas).
     * @param evt Evento lanzado al presionar el checkbox que permite incluir
     * letras mayúsuclas en la contraseña
     */
    private void checkMayusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkMayusActionPerformed
        verificarCheckBoxes(checkMayus);
    }//GEN-LAST:event_checkMayusActionPerformed

    /**
     * Llama al método encargado de verificar que en todo momento se encuentre
     * seleccionado al menos un checkbox (en este caso, el de números).
     * @param evt Evento lanzado al presionar el checkbox que permite incluir
     * números en la contraseña
     */
    private void checkNumsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkNumsActionPerformed
        verificarCheckBoxes(checkNums);
    }//GEN-LAST:event_checkNumsActionPerformed

    /**
     * Llama al método encargado de verificar que en todo momento se encuentre
     * seleccionado al menos un checkbox (en este caso, el de símbolos).
     * @param evt Evento lanzado al presionar el checkbox que permite incluir 
     * símbolos en la contraseña
     */
    private void checkSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkSimActionPerformed
        verificarCheckBoxes(checkSim);
    }//GEN-LAST:event_checkSimActionPerformed

    /**
     * Método que filtra todo lo que escribe el usuario en el campo de longitud
     * de contraseña, de forma que solo se acepten dígitos decimales.
     * @param evt Envento lanzado cuando el usuario escribe algo en el teclado
     */
    private void tamPasswdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tamPasswdKeyTyped
        int caracter = evt.getKeyChar();
        if(!(caracter>=48&&caracter<=57)){ // Ignorar lo que no sea un número
            evt.consume();
        }
    }//GEN-LAST:event_tamPasswdKeyTyped

    /**
     * Metodo que detecta los eventos cuando el usuario deja de presionar las 
     * siguientes teclas:
     * ENTER y TAB: despues de que el usuario escribió un valor en el campo de 
     * longitud. Al presionar estas teclas, se verifica que el campo no esté 
     * vacío; si no lo está se genera una nueva contraseña con el nuevo valor de
     * longitud y se actualiza el color de la barra de nivel.
     * UP y DOWN: incrementan y disminuyen el valor de la longitud, respectivamente.
     * En cada cambio ocurrido en el valor, se actualiza la contraseña.
     * Números decimales (0-9): convierte en un número entero el texto en el 
     * campo de longitud y habilita/deshabilita los botones de flecha hacia 
     * arriba y abajo según el valor obtenido en la conversión.
     * @param evt Evento lanzado al soltar una tecla presionada
     */
    private void tamPasswdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tamPasswdKeyReleased
        if(evt.getKeyCode()==KeyEvent.VK_ENTER||evt.getKeyCode()==KeyEvent.VK_TAB){
            if(!tamPasswd.getText().equals("")){
                System.out.println("key released============");
                tamPasswd.transferFocus(); 
                actualizacionIncompleta = true;
                actualizarPassword();
                System.out.println("===key released============");
            }
            return;
        }
        try{
            longitud = Integer.parseInt(tamPasswd.getText());
      
            if(longitud>=LONGITUD_MAX) btnIncremento.setEnabled(false);
            else btnIncremento.setEnabled(true);

            if(longitud<=LONGITUD_MIN) btnDecremento.setEnabled(false);
            else btnDecremento.setEnabled(true);
        }catch(NumberFormatException ex){
            longitud = -1;
            btnIncremento.setEnabled(false);
            btnDecremento.setEnabled(false);
        }
        if(evt.getKeyCode()==KeyEvent.VK_UP){
            if(longitud<0) return; // si el campo está vacío, no hace nada
            if(longitud>=LONGITUD_MAX) return;
            if(verificarLongitud()){ 
                actualizarPassword();
                return; 
            }
            aumentarLongitud();
            actualizarPassword();
        }
        if(evt.getKeyCode()==KeyEvent.VK_DOWN){
            if(longitud<=LONGITUD_MIN) return;
            if(verificarLongitud()){
                actualizarPassword();
                return;
            }
            disminuirLongitud();
            actualizarPassword();
        }
    }//GEN-LAST:event_tamPasswdKeyReleased

    /**
     * Llama al método encargado de verificar que la longitud de la contraseña
     * se encuentre en el intervalo aceptado por el programa (4 y 50 caracteres).
     * @param evt Evento lanzado cuando el campo de texto para la longitud de la 
     * contraseña pierde el foco
     */
    private void tamPasswdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tamPasswdFocusLost
        System.out.println("Focus lost======================");
        longitudCorregida = verificarLongitud();
        System.out.println("longitudCorregida: " + longitudCorregida);
        System.out.println("===Focus lost======================");
    }//GEN-LAST:event_tamPasswdFocusLost

    /**
     * Método que es llamado cuando el usuario hace clic sobre el botón de flecha
     * hacia arriba. Si al hacer clic el valor de la longitud se encuentra por
     * debajo del rango de valores aceptados, este se sustituye por el valor 
     * mínimo válido (4). En cambio, si el valor de la longitud está dentro del 
     * rango de valores aceptados, al hacer clic en el botón, ese valor se 
     * incrementa en uno.
     * @param evt Evento lanzado cuando el usuario hace clic sobre el botón de 
     * flecha hacia arriba
     */
    private void btnIncrementoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIncrementoActionPerformed
        System.out.println("btnincremento===========================");
        System.out.println("actualizacionIncompleta: "+ actualizacionIncompleta);
        System.out.println("longitudCorregida: "+ longitudCorregida);
        if(actualizacionIncompleta) longitudCorregida = false;      
        // Si la longitud no debió ser corregida al hacer clic en el botón, entonces
        // se incrementa su valor en uno
        if(!longitudCorregida) aumentarLongitud();  
        actualizarPassword();
        actualizacionIncompleta = false;
        System.out.println("===btnincremento===========================");
    }//GEN-LAST:event_btnIncrementoActionPerformed

    /**
     * Metodo que es llamado cuando el usuario hace clic sobre el botón de flecha
     * hacia abajo. Si al hacer clic el valor de la longitud supera el rango de
     * valores aceptados, este se sustituye por el valor máximo aceptado(50).
     * En cambio, si el valor de la longitud está dentro del rango de
     * valores aceptados, al hacer clic en el botón, ese valor disminuye en uno.
     * @param evt Evento lanzado cuando el usuario hace clic sobre el botón de
     * flecha hacia abajo
     */
    private void btnDecrementoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecrementoActionPerformed
        if(actualizacionIncompleta) longitudCorregida = false;   
        if(!longitudCorregida) disminuirLongitud();
        //else longitudCorregida = false;
        actualizarPassword();
        actualizacionIncompleta = false;
    }//GEN-LAST:event_btnDecrementoActionPerformed

    private void campoPasswordMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_campoPasswordMouseClicked
        actualizacionIncompleta = true;
        System.out.println("actualizacionIncompleta: " + actualizacionIncompleta);
    }//GEN-LAST:event_campoPasswordMouseClicked
    
    /**
     * Método que verifica que la longitud para la contraseña está dentro del
     * intervalo de valores aceptados. Si no es así, este valor se sustituye por
     * el valor mínimo o máximo válidos: si el usuario ingresa un valor menor
     * a 4, el valor de la longitud se sustituirá por este; del mismo modo, si 
     * el valor es mayor a 50, el valor de la longitud se sustituirá por este.
     * @return Booleano que indica si se corrigió la longitud
     */
    private boolean verificarLongitud(){    
        if(longitud<LONGITUD_MIN){
            longitud = LONGITUD_MIN;
            tamPasswd.setText(String.valueOf(LONGITUD_MIN));
            btnDecremento.setEnabled(false);
            btnIncremento.setEnabled(true);
            return true;
        }
        if(longitud>LONGITUD_MAX){
            longitud = LONGITUD_MAX;
            tamPasswd.setText(String.valueOf(LONGITUD_MAX));
            btnDecremento.setEnabled(true);
            btnIncremento.setEnabled(false);
            return true;
        }
        return false;
    }
    
    /**
     * Incrementa en uno el valor de la longitud y actualiza la disponibilidad
     * de los botones de incremento/decremento según el nuevo valor. Si al 
     * incrementar la longitud su valor es igual a 50, el botón de flecha hacia
     * arriba se deshabilita. Si el valor es mayor a 4, el botón de flecha hacia
     * abajo se habilita.
     */
    public void aumentarLongitud(){
        tamPasswd.setText(String.valueOf(++longitud));
        if(longitud>=LONGITUD_MAX) btnIncremento.setEnabled(false);
        if(longitud>LONGITUD_MIN) btnDecremento.setEnabled(true);
    }
    
    /**
     * Disminuye en uno el valor de la longitud y actualiza la disponibilidad de
     * los botones de incremento/decremento según el nuevo valor. Si al 
     * disminuir la longitud su valor es igual a 4, el botón de flecha hacia
     * abajo se deshabilita. Si el valor es menor a 50, el botón de flecha hacia
     * arriba se habilita.
     */
    public void disminuirLongitud(){
        tamPasswd.setText(String.valueOf(--longitud));
        if(longitud<=LONGITUD_MIN) btnDecremento.setEnabled(false);
        if(longitud<LONGITUD_MAX) btnIncremento.setEnabled(true);
    }
    
    /**
     * Encargado de llamar a los métodos que pueden generar una contraseña nueva
     * y actualizar el color de la barra de nivel de seguridad.
     */
    private void actualizarPassword(){
        longitudCorregida = false;
        generador.definirPropiedades(longitud,checkMinus.isSelected(),checkMayus.isSelected(),checkNums.isSelected(),checkSim.isSelected());
        campoPassword.setText(generador.generarClave());
        nivel = new NivelSeguridad(longitud,checkMinus.isSelected(),checkMayus.isSelected(),checkNums.isSelected(),checkSim.isSelected());
        cambiarColorNivel(nivel.obtenerNivel());
    }
    
    /**
     * Cambia el color de la barra horizontal dependiendo del nivel de seguridad
     * de la contraseña. La barra puede tomar cuatro colores distintos, que 
     * corresponden uno a cada nivel: rojo(1), naranja(2), amarillo(3), verde(4).
     * @param nivel Grado de seguridad de la contraseña
     */
    private void cambiarColorNivel(int nivel){
        switch(nivel){
            case 1:
                jPanel1.setBackground(new Color(255,51,51)); // Rojo
                break;
            case 2:
                jPanel1.setBackground(new Color(255,153,51)); // Naranja
                break;
            case 3:
                jPanel1.setBackground(new Color(255,204,51)); // Amarillo
                break;
            case 4:
                jPanel1.setBackground(new Color(146,208,80)); // Verde
                break;
        }
    }
    
    /**
     * Método que inicia la ejecución del programa.
     * @param args Argumentos de la línea de comandos
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Pantalla p = new Pantalla();
                p.setVisible(true);
                p.actualizarPassword();
            }
        });     
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCopiar;
    private javax.swing.JButton btnDecremento;
    private javax.swing.JButton btnGenerar;
    private javax.swing.JButton btnIncremento;
    private javax.swing.JTextField campoPassword;
    private javax.swing.JCheckBox checkMayus;
    private javax.swing.JCheckBox checkMinus;
    private javax.swing.JCheckBox checkNums;
    private javax.swing.JCheckBox checkSim;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField tamPasswd;
    // End of variables declaration//GEN-END:variables
}